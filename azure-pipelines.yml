# https://marketplace.visualstudio.com/items?itemName=sariftools.scans

trigger:
- main

variables:
  breakSeverity: "MEDIUM"

pool:
  vmImage: ubuntu-latest

stages:
  - stage: "scan"
    displayName: "KICS - Scan Ansible Playbook"
    jobs: 
      - job: "kics_scan"
        displayName: "Run KICS Scan"
        pool:
          vmImage: "ubuntu-latest"
        container: checkmarx/kics:debian
        steps:
          - script: |
              mkdir -p $(System.DefaultWorkingDirectory)/output
              /app/bin/kics scan --ci -p ${PWD} -o ${PWD} --report-formats json,sarif,html --ignore-on-exit results
              mv results* $(System.DefaultWorkingDirectory)/output
              ls -lhat $(System.DefaultWorkingDirectory)/output
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: $(System.DefaultWorkingDirectory)/output
              artifactName: CodeAnalysisLogs

  - stage: "scan_parse"
    displayName: "KICS - Parse Scan Resaults"
    jobs: 
      - job: "kics_scan_parse_result"
        displayName: "Check KICS Scan Resaults"
        pool:
          vmImage: "ubuntu-latest"
        steps:           
          - task: DownloadPipelineArtifact@2
            displayName: "Download the Security Scan Artifact Result"
            inputs:
              artifact: CodeAnalysisLogs
          - task: Bash@3
            name: "setvar"
            displayName: "Check for issues in the scan result"
            inputs:
                failOnStderr: true
                targetType: "inline"
                script: |
                  resultsFilePath="$(Pipeline.Workspace)/results.json"
                  BREAK=$(breakSeverity)
                  echo "Checking for severity level: $BREAK"
                  noIssues=$(jq --arg BREAK "$BREAK" '.severity_counters[$BREAK] // 0' $resultsFilePath)
                  echo "Number of issues found: $noIssues"
                  if [ "$noIssues" -ge 1 ]; then
                    echo "##vso[task.setvariable variable=OK_TO_DEPLOY;isOutput=true]false"
                    echo "##vso[task.logissue type=error]Pipeline failed due to more than $issueSeverity issue(s) found."
                  elseif [ "$noIssues" -eq 0 ]; then
                    echo "##vso[task.setvariable variable=OK_TO_DEPLOY;isOutput=true]true"
                    echo "##vso[task.complete result=Succeeded;]No issue found. Progressing with pipeline"
                  fi
          - bash: |
              echo "OK_TO_DEPLOY is set to $(scan_parse.setvar.OK_TO_DEPLOY)"
            displayName: 'Check OK_TO_DEPLOY Variable'


  - stage: "run_ansible"
    displayName: "Run Ansible"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.scan_parse.outputs['scan_parse.setvar.OK_TO_DEPLOY'], 'true')
        ) 
    jobs: 
      - job: "ansible_install"
        displayName: "Ansible"
        steps:           
          - task: Bash@3
            name: "ansible"
            displayName: "Run Ansible"
            inputs:
                targetType: "inline"
                script: |
                  ansible-galaxy collection install --force azure.azcollection
                  pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt
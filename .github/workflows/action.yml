name: "Ansible Playbook Run"

env:
  FAIL_ON: "high" # high,medium
  RESULTS_DIR: "results-dir"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # scan_ansible_playbook:
  #   name: "Scan Ansible Playbook"
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: "Create the folder for storing the scan results"
  #       run: mkdir -p ${{env.RESULTS_DIR}}

  #     - name: "Run kics Scan"
  #       uses: "checkmarx/kics-github-action@v1.7.0"
  #       with:
  #         path: "./"
  #         output_path: "${{env.RESULTS_DIR}}"
  #         output_formats: "json,sarif"
  #         fail_on: "${{ env.FAIL_ON }}"
  #         enable_jobs_summary: true

  #     - name: Upload SARIF file
  #       if: always()
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: ${{env.RESULTS_DIR}}/results.sarif
  #         wait-for-processing: true 

  run_ansible_playbook:
    name: "Install Ansible and run Playbook"
    runs-on: ubuntu-latest
    # needs: scan_ansible_playbook
    defaults:
      run:
        shell: bash

    steps:      
      - name: "Cache Ansible collections and Python packages"
        uses: actions/cache@v3
        with:
          path: |
            ~/.ansible/collections
            ~/.cache/pip
            /home/runner/.local/lib/python3.10/site-packages
          key: ${{ runner.os }}-ansible-collections-and-python-packages
          restore-keys: |
            ${{ runner.os }}-ansible-collections-and-python-packages
        
      - name: "Install Azure Collection"
        run: |
          if [ ! -d ~/.ansible/collections/ansible_collections/azure/azcollection ]; then
            ansible-galaxy collection install --force azure.azcollection
            pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt
          else
            echo "Azure collection is already installed."
          fi

      - name: "Find Python package installation path"
        run: |
          PACKAGE_NAME=$(head -n 1 ~/.ansible/collections/ansible_collections/azure/azcollection/requirements-azure.txt | cut -d'=' -f1)
          PACKAGE_PATH=$(pip3 show $PACKAGE_NAME | grep Location | cut -d' ' -f2)
          echo "Package $PACKAGE_NAME is installed at: $PACKAGE_PATH"
          
      - name: "Checkout the code"
        id: "checkout"
        uses: "actions/checkout@v4"

      - name: "Login to Azure using a service principal"
        uses: "Azure/login@v1"
        with:
          creds: '{"clientId":"${{ secrets.ARM_CLIENT_ID }}","clientSecret":"${{ secrets.ARM_CLIENT_SECRET }}","subscriptionId":"${{ secrets.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.ARM_TENANT_ID }}"}'

      - name: "Run the playbook (with ansible-playbook)"
        id: "ansible-playbook-run"
        continue-on-error: true
        run: |
          set -o pipefail  # Catch errors in piped commands
          ANSIBLE_OUTPUT_FILE=ansible_output.log
          ansible-playbook -vvv -i inv site.yml | tee $ANSIBLE_OUTPUT_FILE
          ANSIBLE_EXIT_CODE="${PIPESTATUS[0]}"  # Capture the exit code of ansible-playbook

          # Start constructing the task summary
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Ansible Playbook Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          cat $ANSIBLE_OUTPUT_FILE >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT

          # Check if ansible-playbook failed and append an error message to the summary
          if [ "$ANSIBLE_EXIT_CODE" -ne 0 ]; then
            echo "## :warning: Error in Ansible Playbook" >> $GITHUB_OUTPUT
            echo "Ansible Playbook failed with exit code $ANSIBLE_EXIT_CODE. Please check the details above." >> $GITHUB_OUTPUT
          fi

          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: "Publish Ansible Playbook run to Task Summary"
        run: |
          SUMMARY=$(cat $GITHUB_OUTPUT)
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY




